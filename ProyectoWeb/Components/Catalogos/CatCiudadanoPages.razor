@page "/catalogos/ciudadano1"

<h3>Catálogo de Ciudadanos - Sistema de Gestión</h3>
<br />

<!-- Encabezado con estadísticas -->
<RadzenRow Gap="1rem" class="rz-mb-4">
    <RadzenColumn Size="3">
        <RadzenCard>
            <RadzenStack AlignItems="AlignItems.Center" Gap="0.5rem">
                <RadzenIcon Icon="people" Style="font-size: 2rem; color: var(--rz-primary);" />
                <RadzenText TextStyle="TextStyle.H6">Total Ciudadanos</RadzenText>
                <RadzenText TextStyle="TextStyle.H4" class="rz-color-primary">
                    @(ciudadanos?.Count ?? 0)
                </RadzenText>
            </RadzenStack>
        </RadzenCard>
    </RadzenColumn>
    <RadzenColumn Size="3">
        <RadzenCard>
            <RadzenStack AlignItems="AlignItems.Center" Gap="0.5rem">
                <RadzenIcon Icon="check_circle" Style="font-size: 2rem; color: var(--rz-success);" />
                <RadzenText TextStyle="TextStyle.H6">Habilitados</RadzenText>
                <RadzenText TextStyle="TextStyle.H4" class="rz-color-success">
                    @ciudadanosHabilitados
                </RadzenText>
            </RadzenStack>
        </RadzenCard>
    </RadzenColumn>
    <RadzenColumn Size="3">
        <RadzenCard>
            <RadzenStack AlignItems="AlignItems.Center" Gap="0.5rem">
                <RadzenIcon Icon="flag" Style="font-size: 2rem; color: var(--rz-warning);" />
                <RadzenText TextStyle="TextStyle.H6">En USA</RadzenText>
                <RadzenText TextStyle="TextStyle.H4" class="rz-color-warning">
                    @ciudadanosEnUSA
                </RadzenText>
            </RadzenStack>
        </RadzenCard>
    </RadzenColumn>
    <RadzenColumn Size="3">
        <RadzenCard>
            <RadzenStack AlignItems="AlignItems.Center" Gap="0.5rem">
                <RadzenIcon Icon="admin_panel_settings" Style="font-size: 2rem; color: var(--rz-info);" />
                <RadzenText TextStyle="TextStyle.H6">Administradores</RadzenText>
                <RadzenText TextStyle="TextStyle.H4" class="rz-color-info">
                    @administradores
                </RadzenText>
            </RadzenStack>
        </RadzenCard>
    </RadzenColumn>
</RadzenRow>

<!-- Controles de acción -->
<RadzenCard class="rz-mb-3">
    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem" JustifyContent="JustifyContent.SpaceBetween">
        <RadzenText TextStyle="TextStyle.H6">
            <RadzenIcon Icon="people" /> Gestión de Ciudadanos
        </RadzenText>
        <RadzenButton Text="Agregar Ciudadano" Icon="add" ButtonStyle="ButtonStyle.Success"
                      Click="(()=>Editar(new Ciudadano()))" />
    </RadzenStack>
</RadzenCard>

<!-- Tabla de ciudadanos -->
<RadzenCard>
    <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H5" class="rz-mb-3">
        <RadzenIcon Icon="list" /> Lista de Ciudadanos
    </RadzenText>

    @if (ciudadanos != null && ciudadanos.Any())
    {
        <div style="overflow-x: auto; overflow-y: visible;">
            <RadzenDataGrid @ref="grid" AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="true"
                            FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="10" AllowPaging="true"
                            PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                            Data="@ciudadanos" TItem="Ciudadano" Style="border: none;">
                <Columns>
                    <RadzenDataGridColumn Property="IdCiudadano" Title="ID" Width="80px" TextAlign="TextAlign.Center">
                        <Template Context="data">
                            <RadzenBadge BadgeStyle="BadgeStyle.Info" Text="@data.IdCiudadano" />
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Property="Nombre" Title="Nombre Completo" Width="250px">
                        <Template Context="data">
                            <RadzenStack Gap="0.25rem">
                                <RadzenText TextStyle="TextStyle.Subtitle2" Style="color: var(--rz-primary);">
                                    <RadzenIcon Icon="person" Style="font-size: 1rem;" />
                                    @data.Nombre @data.Apellidos
                                </RadzenText>
                                @if (!string.IsNullOrEmpty(data.Email))
                                {
                                    <RadzenText TextStyle="TextStyle.Caption" class="rz-color-secondary">
                                        <RadzenIcon Icon="email" Style="font-size: 0.8rem;" />
                                        @data.Email
                                    </RadzenText>
                                }
                            </RadzenStack>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Property="TelefonoCasa" Title="Contacto" Width="180px">
                        <Template Context="data">
                            <RadzenStack Gap="0.25rem">
                                @if (!string.IsNullOrEmpty(data.TelefonoCasa))
                                {
                                    <RadzenText TextStyle="TextStyle.Body2">
                                        <RadzenIcon Icon="phone" Style="font-size: 0.8rem;" />
                                        @data.TelefonoCasa
                                    </RadzenText>
                                }
                                @if (!string.IsNullOrEmpty(data.TelefonoCelular))
                                {
                                    <RadzenText TextStyle="TextStyle.Body2" class="rz-color-secondary">
                                        <RadzenIcon Icon="smartphone" Style="font-size: 0.8rem;" />
                                        @data.TelefonoCelular
                                    </RadzenText>
                                }
                            </RadzenStack>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Property="Direccion" Title="Dirección" Width="200px">
                        <Template Context="data">
                            @if (!string.IsNullOrEmpty(data.Direccion))
                            {
                                <RadzenText TextStyle="TextStyle.Body2" class="rz-color-secondary">
                                    <RadzenIcon Icon="location_on" Style="font-size: 0.8rem;" />
                                    @(data.Direccion.Length > 50 ? data.Direccion.Substring(0, 50) + "..." : data.Direccion)
                                    @if (!string.IsNullOrEmpty(data.NoCasa))
                                    {
                                        <span> #@data.NoCasa</span>
                                    }
                                </RadzenText>
                            }
                            else
                            {
                                <RadzenText TextStyle="TextStyle.Body2" class="rz-color-secondary">
                                    <em>Sin dirección</em>
                                </RadzenText>
                            }
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Title="Estado" Width="120px" TextAlign="TextAlign.Center">
                        <Template Context="data">
                            <RadzenStack Gap="0.25rem">
                                <RadzenBadge BadgeStyle="@(data.Habilitado ? BadgeStyle.Success : BadgeStyle.Danger)"
                                             Text="@(data.Habilitado ? "Habilitado" : "Deshabilitado")" />
                                @if (data.EstaEnUSA)
                                {
                                    <RadzenBadge BadgeStyle="BadgeStyle.Warning" Text="En USA" />
                                }
                                @if (data.EsAdministrador)
                                {
                                    <RadzenBadge BadgeStyle="BadgeStyle.Info" Text="Admin" />
                                }
                            </RadzenStack>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Title="Acciones" Width="120px" TextAlign="TextAlign.Center">
                        <Template Context="data">
                            <RadzenStack Orientation="Orientation.Horizontal" Gap="0.25rem" JustifyContent="JustifyContent.Center">
                                <RadzenButton Click="(()=>VerDetalle(data))" ButtonStyle="ButtonStyle.Info"
                                              Icon="visibility" Size="ButtonSize.Small" />
                                <RadzenButton Click="(()=>Editar(data))" ButtonStyle="ButtonStyle.Warning"
                                              Icon="edit" Size="ButtonSize.Small"
                                              Tooltip="Editar ciudadano" />
                                <RadzenButton Click="(()=>Eliminar(data))" ButtonStyle="ButtonStyle.Danger"
                                              Icon="delete" Size="ButtonSize.Small"
                                              Tooltip="Eliminar ciudadano" />
                            </RadzenStack>
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        </div>
    }
    else if (ciudadanos == null)
    {
        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
        <RadzenText TextStyle="TextStyle.Body2" class="rz-mt-2">Cargando ciudadanos...</RadzenText>
    }
    else
    {
        <RadzenAlert AlertStyle="AlertStyle.Info" Icon="info" Title="Sin ciudadanos registrados">
            No hay ciudadanos registrados en el sistema.
            <RadzenButton Text="Agregar Primer Ciudadano" Icon="add" ButtonStyle="ButtonStyle.Success"
                          Click="(()=>Editar(new Ciudadano()))"
                          Size="ButtonSize.Small" class="rz-mt-2" />
        </RadzenAlert>
    }
</RadzenCard>

@code {
    // Declaración de variables y servicios utilizados
    RadzenDataGrid<Ciudadano> grid;
    CiudadanoManager ciudadanoManager;
    List<Ciudadano> ciudadanos;

    TipoUsuarioManager tipoUsuarioManager;
    List<TipoUsuario> tipoUsuarios;

    SeccionManager seccionManager;
    List<Seccion> secciones;

    Ciudadano item;
    Dictionary<string, string> sexos;

    // Variables para estadísticas
    int ciudadanosHabilitados = 0;
    int ciudadanosEnUSA = 0;
    int administradores = 0;

    // Método que se ejecuta al inicializar el componente
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        // Se inicializan los managers desde un "fabric manager"
        ciudadanoManager = FabricManager.CiudadanoManager;
        seccionManager = FabricManager.SeccionManager;
        tipoUsuarioManager = FabricManager.TipoUsuarioManager;

        // Se obtienen listas de datos necesarias
        tipoUsuarios = await tipoUsuarioManager.ObtenerTodos() ?? new List<TipoUsuario>();
        secciones = await seccionManager.ObtenerTodos() ?? new List<Seccion>();

        // Diccionario para el dropdown de sexo
        sexos = new Dictionary<string, string>();
        sexos.Add("M", "Masculino");
        sexos.Add("F", "Femenino");

        // Se actualiza la tabla con los datos actuales
        await ActualizarTabla();
    }

    // Método que carga los ciudadanos en la lista
    async Task ActualizarTabla()
    {
        try
        {
            ciudadanos = await ciudadanoManager.ObtenerTodos() ?? new List<Ciudadano>();
            CalcularEstadisticas();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar ciudadanos: {ex.Message}");
        }
    }

    void CalcularEstadisticas()
    {
        if (ciudadanos != null)
        {
            ciudadanosHabilitados = ciudadanos.Count(c => c.Habilitado);
            ciudadanosEnUSA = ciudadanos.Count(c => c.EstaEnUSA);
            administradores = ciudadanos.Count(c => c.EsAdministrador);
        }
    }

    // Método para abrir el formulario de edición (o creación)
    async Task Editar(Ciudadano ciudadano)
    {
        string titulo = string.IsNullOrEmpty(ciudadano.IdCiudadano) ? "Nuevo Ciudadano" : $"Editar {ciudadano.Nombre}";

        // Abre un modal (diálogo) con el formulario de edición
        var result = await dialogService.OpenAsync(titulo, ds =>
    @<RadzenStack Gap="1.5rem">
        <!-- Estructura del formulario en filas y columnas -->
        <div class="row">
            <div class="col-6">Nombre</div>
            <div class="col-6">Apellidos</div>
        </div>
        <div class="row">
            <div class="col-6"><RadzenTextBox @bind-Value="ciudadano.Nombre" class="w-100" Placeholder="Ingrese el nombre" /></div>
            <div class="col-6"><RadzenTextBox @bind-Value="ciudadano.Apellidos" class="w-100" Placeholder="Ingrese los apellidos" /></div>
        </div>
        <div class="row">
            <div class="col-6">Dirección</div>
            <div class="col-3">No. Casa</div>
            <div class="col-3">Sexo</div>
        </div>
        <div class="row">
            <div class="col-6"><RadzenTextBox @bind-Value="ciudadano.Direccion" class="w-100" Placeholder="Ingrese la dirección" /></div>
            <div class="col-3"><RadzenTextBox @bind-Value="ciudadano.NoCasa" class="w-100" Placeholder="Número" /></div>
            <div class="col-3"><RadzenDropDown @bind-Value="ciudadano.Sexo" Data="sexos" TValue="string" ValueProperty="Key" TextProperty="Value" Placeholder="Seleccione..." /></div>
        </div>
        <div class="row">
            <div class="col-4">Email</div>
            <div class="col-4">Tel. Casa</div>
            <div class="col-4">Tel. Celular</div>
        </div>
        <div class="row">
            <div class="col-4"><RadzenTextBox @bind-Value="ciudadano.Email" class="w-100" Placeholder="correo@ejemplo.com" /></div>
            <div class="col-4"><RadzenTextBox @bind-Value="ciudadano.TelefonoCasa" class="w-100" Placeholder="Teléfono casa" /></div>
            <div class="col-4"><RadzenTextBox @bind-Value="ciudadano.TelefonoCelular" class="w-100" Placeholder="Teléfono celular" /></div>
        </div>
        <div class="row">
            <div class="col-2">Habilitado</div>
            <div class="col-1"><RadzenSwitch @bind-Value="ciudadano.Habilitado" /></div>
            <div class="col-2">Vive en USA</div>
            <div class="col-1"><RadzenSwitch @bind-Value="ciudadano.EstaEnUSA" /></div>
            <div class="col-2">Sección</div>
            <div class="col-4"><RadzenDropDown @bind-Value="ciudadano.IdSeccion" Data="secciones" TValue="int" ValueProperty="IdSeccion" TextProperty="Nombre" Placeholder="Seleccione sección..." /></div>
        </div>
        <div class="row">
            <div class="col-2">Contraseña</div>
            <div class="col-4"><RadzenPassword @bind-Value="ciudadano.Password" class="w-100" Placeholder="Ingrese contraseña" /></div>
            <div class="col-2">Tipo Usuario</div>
            <div class="col-4"><RadzenDropDown @bind-Value="ciudadano.IdTipoUsuario" Data="tipoUsuarios" TValue="int" ValueProperty="IdTipoUsuario" TextProperty="Nombre" Placeholder="Seleccione tipo..." /></div>
        </div>
        <div class="row">
            <div class="col-md-4 d-flex align-items-center">
                <label class="me-2">Latitud:</label>
                <RadzenNumeric @bind-Value="ciudadano.Latitud" class="w-100" />
            </div>
            <div class="col-md-4 d-flex align-items-center">
                <label class="me-2">Longitud:</label>
                <RadzenNumeric @bind-Value="ciudadano.Longitud" class="w-100" />
            </div>
            <div class="col-md-4 d-flex align-items-center">
                <label class="me-2">Es Administrador:</label>
                <RadzenSwitch @bind-Value="ciudadano.EsAdministrador" />
            </div>
        </div>
        <div class="row">
            <div class="col-6"></div>
            <!-- Botones de guardar y cancelar -->
            <div class="col-3">
                <RadzenButton Text="Guardar" ButtonStyle="ButtonStyle.Primary"
                              Click="(() => Guardar(ciudadano, ds))" class="w-100" />
            </div>
            <div class="col-3">
                <RadzenButton Text="Cancelar" ButtonStyle="ButtonStyle.Secondary"
                              Click="(() => ds.Close(false))" class="w-100" />
            </div>
        </div>
    </RadzenStack>,
        new DialogOptions()
        {
            Draggable = true,
            ShowClose = true,
            Resizable = true,
            Width = "800px",
            Height = "650px"
        });

        if (result == true)
        {
            await ActualizarTabla();
        }
    }

    async Task VerDetalle(Ciudadano ciudadano)
    {
        await dialogService.OpenAsync($"Detalle - {ciudadano.Nombre}", ds =>
    @<RadzenStack Gap="1rem">
        <!-- Primera fila: Información básica en línea -->
        <RadzenRow Gap="1rem">
            <RadzenColumn Size="4">
                <RadzenFieldset Text="Datos Personales">
                    <RadzenStack Gap="0.5rem">
                        <RadzenText><strong>Nombre:</strong> @ciudadano.Nombre</RadzenText>
                        <RadzenText><strong>Apellidos:</strong> @ciudadano.Apellidos</RadzenText>
                        <RadzenText><strong>Sexo:</strong> @ciudadano.Sexo</RadzenText>
                    </RadzenStack>
                </RadzenFieldset>
            </RadzenColumn>
            <RadzenColumn Size="4">
                <RadzenFieldset Text="Contacto">
                    <RadzenStack Gap="0.5rem">
                        <RadzenText><strong>Email:</strong> @ciudadano.Email</RadzenText>
                        <RadzenText><strong>Tel. Casa:</strong> @ciudadano.TelefonoCasa</RadzenText>
                        <RadzenText><strong>Tel. Celular:</strong> @ciudadano.TelefonoCelular</RadzenText>
                    </RadzenStack>
                </RadzenFieldset>
            </RadzenColumn>
            <RadzenColumn Size="4">
                <RadzenFieldset Text="Estado">
                    <RadzenStack Gap="0.5rem">
                        <RadzenText><strong>Administrador:</strong> @(ciudadano.EsAdministrador ? "✅ Sí" : "❌ No")</RadzenText>
                        <RadzenText><strong>Habilitado:</strong> @(ciudadano.Habilitado ? "✅ Sí" : "❌ No")</RadzenText>
                        <RadzenText><strong>En USA:</strong> @(ciudadano.EstaEnUSA ? "✅ Sí" : "❌ No")</RadzenText>
                    </RadzenStack>
                </RadzenFieldset>
            </RadzenColumn>
        </RadzenRow>

        <!-- Segunda fila: Información de ubicación y sistema -->
        <RadzenRow Gap="1rem">
            <RadzenColumn Size="6">
                <RadzenFieldset Text="Ubicación">
                    <RadzenStack Gap="0.5rem">
                        <RadzenText><strong>Dirección:</strong> @ciudadano.Direccion</RadzenText>
                        <RadzenText><strong>No. Casa:</strong> @ciudadano.NoCasa</RadzenText>
                        <RadzenText><strong>Coordenadas:</strong> @ciudadano.Latitud, @ciudadano.Longitud</RadzenText>
                    </RadzenStack>
                </RadzenFieldset>
            </RadzenColumn>
            <RadzenColumn Size="6">
                <RadzenFieldset Text="Sistema" Style="height: 100%;">
                    <RadzenStack Gap="0.5rem">
                        <RadzenText><strong>Sección:</strong> @secciones.FirstOrDefault(s => s.IdSeccion == ciudadano.IdSeccion)?.Nombre</RadzenText>
                        <RadzenText><strong>Tipo Usuario:</strong> @tipoUsuarios.FirstOrDefault(s => s.IdTipoUsuario == ciudadano.IdTipoUsuario)?.Nombre</RadzenText>
                    </RadzenStack>
                </RadzenFieldset>
            </RadzenColumn>
        </RadzenRow>

        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="0.5rem">
            <RadzenButton Text="Cerrar" ButtonStyle="ButtonStyle.Secondary" Click="(() => ds.Close())" />
        </RadzenStack>
    </RadzenStack>,
        new DialogOptions()
        {
            Width = "1000px",
            Height = "500px",
            Resizable = true,
            Draggable = true
        });
    }

    // Guarda un ciudadano nuevo o modificado
    async Task Guardar(Ciudadano ciudadano, DialogService ds)
    {
        if (string.IsNullOrWhiteSpace(ciudadano.Nombre))
        {
            await dialogService.Alert("El nombre del ciudadano es obligatorio", "Validación");
            return;
        }

        if (string.IsNullOrWhiteSpace(ciudadano.Apellidos))
        {
            await dialogService.Alert("Los apellidos del ciudadano son obligatorios", "Validación");
            return;
        }

        Ciudadano resultado;
        if (string.IsNullOrEmpty(ciudadano.IdCiudadano))
        {
            // Si no tiene ID, es nuevo
            resultado = await ciudadanoManager.Agregar(ciudadano);
        }
        else
        {
            // Si tiene ID, se edita
            resultado = await ciudadanoManager.Modificar(ciudadano);
        }

        if (resultado != null)
        {
            // Si se guarda exitosamente, se cierra el diálogo
            ds.Close(true);
            await ActualizarTabla();
        }
        else
        {
            // Muestra alerta si hubo error
            await dialogService.Alert(ciudadanoManager.Error, "Error al guardar");
        }
    }

    // Elimina un ciudadano después de confirmar
    async Task Eliminar(Ciudadano ciudadano)
    {
        var result = await dialogService.OpenAsync($"Confirmar eliminación", ds =>
    @<RadzenStack Gap="1rem">
        <RadzenAlert AlertStyle="AlertStyle.Warning" Icon="warning" Title="¿Está seguro?">
            Se eliminará permanentemente al ciudadano <strong>@ciudadano.Nombre @ciudadano.Apellidos</strong>.
            <br />Esta acción no se puede deshacer.
        </RadzenAlert>

        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="0.5rem">
            <RadzenButton Text="Cancelar" ButtonStyle="ButtonStyle.Secondary"
                          Click="(() => ds.Close(false))" />
            <RadzenButton Text="Sí, eliminar" ButtonStyle="ButtonStyle.Danger"
                          Click="(() => ds.Close(true))" />
        </RadzenStack>
    </RadzenStack>,
        new DialogOptions()
        {
            Width = "500px",
            Height = "300px",
            Resizable = true,
            Draggable = true
        });

        if (result == true)
        {
            var eliminado = await ciudadanoManager.Eliminar(ciudadano.IdCiudadano);
            if (eliminado)
            {
                await ActualizarTabla();
            }
            else
            {
                await dialogService.Alert(ciudadanoManager.Error ?? "Error desconocido", "Error al eliminar");
            }
        }
    }
}