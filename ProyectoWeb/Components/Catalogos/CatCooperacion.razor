@page "/catalogos/Cooperacion"

<style>
    .main-container {
        padding: 2rem;
        max-width: 1200px;
        margin: 0 auto;
        background-color: #f9fafb;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
    }
</style>

<h3>Catálogo de Cooperaciones - Sistema de Gestión</h3>
<br />

<!-- Encabezado con estadísticas -->
<RadzenRow Gap="1rem" class="rz-mb-4">
    <RadzenColumn Size="3">
        <RadzenCard>
            <RadzenStack AlignItems="AlignItems.Center" Gap="0.5rem">
                <RadzenIcon Icon="handshake" Style="font-size: 2rem; color: var(--rz-primary);" />
                <RadzenText TextStyle="TextStyle.H6">Total Cooperaciones</RadzenText>
                <RadzenText TextStyle="TextStyle.H4" class="rz-color-primary">
                    @(cooperacions?.Count ?? 0)
                </RadzenText>
            </RadzenStack>
        </RadzenCard>
    </RadzenColumn>
    <RadzenColumn Size="3">
        <RadzenCard>
            <RadzenStack AlignItems="AlignItems.Center" Gap="0.5rem">
                <RadzenIcon Icon="check_circle" Style="font-size: 2rem; color: var(--rz-success);" />
                <RadzenText TextStyle="TextStyle.H6">Activas</RadzenText>
                <RadzenText TextStyle="TextStyle.H4" class="rz-color-success">
                    @cooperacionesActivas
                </RadzenText>
            </RadzenStack>
        </RadzenCard>
    </RadzenColumn>
    <RadzenColumn Size="3">
        <RadzenCard>
            <RadzenStack AlignItems="AlignItems.Center" Gap="0.5rem">
                <RadzenIcon Icon="attach_money" Style="font-size: 2rem; color: var(--rz-warning);" />
                <RadzenText TextStyle="TextStyle.H6">Monto Total</RadzenText>
                <RadzenText TextStyle="TextStyle.H4" class="rz-color-warning">
                    @montoTotal.ToString("C")
                </RadzenText>
            </RadzenStack>
        </RadzenCard>
    </RadzenColumn>
    <RadzenColumn Size="3">
        <RadzenCard>
            <RadzenStack AlignItems="AlignItems.Center" Gap="0.5rem">
                <RadzenIcon Icon="note" Style="font-size: 2rem; color: var(--rz-info);" />
                <RadzenText TextStyle="TextStyle.H6">Con Descripción</RadzenText>
                <RadzenText TextStyle="TextStyle.H4" class="rz-color-info">
                    @cooperacionesConDescripcion
                </RadzenText>
            </RadzenStack>
        </RadzenCard>
    </RadzenColumn>
</RadzenRow>

<!-- Controles de acción -->
<RadzenCard class="rz-mb-3">
    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem" JustifyContent="JustifyContent.SpaceBetween">
        <RadzenText TextStyle="TextStyle.H6">
            <RadzenIcon Icon="handshake" /> Gestión de Cooperaciones
        </RadzenText>
        <RadzenButton Text="Agregar Cooperación" Icon="add" ButtonStyle="ButtonStyle.Success"
                      Click="(()=>Editar(new Cooperacion()))" />
    </RadzenStack>
</RadzenCard>

<!-- Tabla de cooperaciones -->
<RadzenCard>
    <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H5" class="rz-mb-3">
        <RadzenIcon Icon="list" /> Lista de Cooperaciones
    </RadzenText>

    @if (cooperacions != null && cooperacions.Any())
    {
        <div class="main-container" style="overflow-x: auto; overflow-y: visible;">
            <RadzenDataGrid @ref="grid" AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="true"
                            FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="10" AllowPaging="true"
                            PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                            Data="@cooperacions" TItem="Cooperacion" Style="border: none;">
                <Columns>
                    <RadzenDataGridColumn Property="IdCooperacion" Title="ID" Width="95px" TextAlign="TextAlign.Center">
                        <Template Context="data">
                            <RadzenBadge BadgeStyle="BadgeStyle.Info" Text="@data.IdCooperacion.ToString()" />
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Property="Nombre" Title="Nombre" Width="200px">
                        <Template Context="data">
                            <RadzenStack Gap="0.25rem">
                                <RadzenText TextStyle="TextStyle.Subtitle2" Style="color: var(--rz-primary);">
                                    <RadzenIcon Icon="handshake" Style="font-size: 1rem;" />
                                    @data.Nombre
                                </RadzenText>
                            </RadzenStack>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Property="Descripcion" Title="Descripción" Width="250px">
                        <Template Context="data">
                            @if (!string.IsNullOrEmpty(data.Descripcion))
                            {
                                <RadzenText TextStyle="TextStyle.Body2" class="rz-color-secondary">
                                    @(data.Descripcion.Length > 30 ? data.Descripcion.Substring(0, 30) + "..." : data.Descripcion)
                                </RadzenText>
                            }
                            else
                            {
                                <RadzenText TextStyle="TextStyle.Body2" class="rz-color-secondary">
                                    <em>Sin descripción</em>
                                </RadzenText>
                            }
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Property="Monto" Title="Monto" Width="120px" TextAlign="TextAlign.Right">
                        <Template Context="data">
                            <RadzenBadge BadgeStyle="BadgeStyle.Warning" Text="@data.Monto.ToString("C")" />
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Property="FechaDeInicio" Title="Fecha Inicio" Width="200px" TextAlign="TextAlign.Center">
                        <Template Context="data">
                            <RadzenText TextStyle="TextStyle.Body2">
                                @data.FechaDeInicio.ToString("dd/MM/yyyy")
                            </RadzenText>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Property="FechaLimiteDePago" Title="Fecha Límite" Width="200px" TextAlign="TextAlign.Center">
                        <Template Context="data">
                            <RadzenText TextStyle="TextStyle.Body2" class="@(data.FechaLimiteDePago < DateTime.Now ? "rz-color-danger" : "rz-text-color")">
                                @data.FechaLimiteDePago.ToString("dd/MM/yyyy")
                            </RadzenText>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Title="Estado" Width="200px" TextAlign="TextAlign.Center">
                        <Template Context="data">
                            <RadzenBadge BadgeStyle="@(data.FechaLimiteDePago < DateTime.Now ? BadgeStyle.Danger : BadgeStyle.Success)"
                                         Text="@(data.FechaLimiteDePago < DateTime.Now ? "Vencida" : "Vigente")" />
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Title="Acciones" Width="120px" TextAlign="TextAlign.Center" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
                        <Template Context="data">
                            <RadzenStack Orientation="Orientation.Horizontal" Gap="0.25rem" JustifyContent="JustifyContent.Center">
                                <RadzenButton Click="(()=>VerDetalle(data))" ButtonStyle="ButtonStyle.Info"
                                              Icon="visibility" Size="ButtonSize.Small" />
                                <RadzenButton Click="(()=>Editar(data))" ButtonStyle="ButtonStyle.Warning"
                                              Icon="edit" Size="ButtonSize.Small"
                                              Tooltip="Editar cooperación" />
                                <RadzenButton Click="(()=>Eliminar(data))" ButtonStyle="ButtonStyle.Danger"
                                              Icon="delete" Size="ButtonSize.Small"
                                              Tooltip="Eliminar cooperación" />
                            </RadzenStack>
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        </div>
    }
    else if (cooperacions == null)
    {
        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
        <RadzenText TextStyle="TextStyle.Body2" class="rz-mt-2">Cargando cooperaciones...</RadzenText>
    }
    else
    {
        <RadzenAlert AlertStyle="AlertStyle.Info" Icon="info" Title="Sin cooperaciones registradas">
            No hay cooperaciones registradas en el sistema.
            <RadzenButton Text="Agregar Primera Cooperación" Icon="add" ButtonStyle="ButtonStyle.Success"
                          Click="(()=>Editar(new Cooperacion()))"
                          Size="ButtonSize.Small" class="rz-mt-2" />
        </RadzenAlert>
    }
</RadzenCard>

@code {
    RadzenDataGrid<Cooperacion> grid;
    CooperacionManager cooperacionManager;
    List<Cooperacion> cooperacions;

    // Variables para estadísticas
    int cooperacionesActivas = 0;
    int cooperacionesConDescripcion = 0;
    decimal montoTotal = 0;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        cooperacionManager = FabricManager.CooperacionManager;
        await ActualizarTabla();
    }

    async Task ActualizarTabla()
    {
        try
        {
            cooperacions = await cooperacionManager.ObtenerTodos() ?? new List<Cooperacion>();
            CalcularEstadisticas();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar cooperaciones: {ex.Message}");
        }
    }

    void CalcularEstadisticas()
    {
        if (cooperacions != null)
        {
            cooperacionesActivas = cooperacions.Count(c => c.FechaLimiteDePago >= DateTime.Now);
            cooperacionesConDescripcion = cooperacions.Count(c => !string.IsNullOrEmpty(c.Descripcion));
            montoTotal = cooperacions.Sum(c => c.Monto);
        }
    }

    async Task Editar(Cooperacion cooperacion)
    {
        string titulo = cooperacion.IdCooperacion == 0 ? "Nueva Cooperación" : $"Editar {cooperacion.Nombre}";
        var result = await dialogService.OpenAsync(titulo, ds =>
    @<RadzenStack Gap="1.5rem">
        <div class="row">
            <div class="col-4">Nombre</div>
            <div class="col-8"><RadzenTextBox @bind-Value="cooperacion.Nombre" class="w-100" Placeholder="Ingrese el nombre de la cooperación" /></div>
        </div>
        <div class="row">
            <div class="col-4">Descripción</div>
            <div class="col-8"><RadzenTextArea @bind-Value="cooperacion.Descripcion" class="w-100" Placeholder="Descripción opcional de la cooperación" Rows="3" /></div>
        </div>
        <div class="row">
            <div class="col-4">Monto</div>
            <div class="col-8"><RadzenNumeric @bind-Value="cooperacion.Monto" class="w-100" Placeholder="0.00" TValue="decimal" Format="c" /></div>
        </div>
        <div class="row">
            <div class="col-4">Fecha de Inicio</div>
            <div class="col-8"><RadzenDatePicker @bind-Value="cooperacion.FechaDeInicio" class="w-100" Placeholder="Seleccione la fecha" AllowClear="true" ShowTime="false" DateFormat="dd/MM/yyyy" /></div>
        </div>
        <div class="row">
            <div class="col-4">Fecha Límite de Pago</div>
            <div class="col-8"><RadzenDatePicker @bind-Value="cooperacion.FechaLimiteDePago" class="w-100" Placeholder="Seleccione la fecha" AllowClear="true" ShowTime="false" DateFormat="dd/MM/yyyy" /></div>
        </div>
        <div class="row">
            <div class="col-6"></div>
            <div class="col-3">
                <RadzenButton Text="Guardar" ButtonStyle="ButtonStyle.Primary"
                              Click="(() => Guardar(cooperacion, ds))" class="w-100" />
            </div>
            <div class="col-3">
                <RadzenButton Text="Cancelar" ButtonStyle="ButtonStyle.Secondary"
                              Click="(() => ds.Close(false))" class="w-100" />
            </div>
        </div>
    </RadzenStack>,
        new DialogOptions()
        {
            Draggable = true,
            ShowClose = true,
            Resizable = true,
            Width = "600px",
            Height = "530px"
        });

        if (result == true)
        {
            await ActualizarTabla();
        }
    }

    async Task VerDetalle(Cooperacion cooperacion)
    {
        await dialogService.OpenAsync($"Detalle - {cooperacion.Nombre}", ds =>
    @<RadzenStack Gap="1rem">
        <RadzenFieldset Text="Información de la Cooperación">
            <!-- Nombre y Monto en fila horizontal -->
            <RadzenRow Gap="1rem">
                <RadzenColumn Size="8">
                    <RadzenText><strong>Nombre:</strong> @cooperacion.Nombre</RadzenText>
                </RadzenColumn>
                <RadzenColumn Size="4">
                    <RadzenText>
                        <strong>Monto:</strong>
                        <span style="color: #dc3545; font-weight: 600; font-size: 1.1rem;">
                            $@cooperacion.Monto.ToString("N2")
                        </span>
                    </RadzenText>
                </RadzenColumn>
            </RadzenRow>

            <!-- Fechas en fila horizontal -->
            <RadzenRow Gap="1rem" Style="margin-top: 1rem;">
                <RadzenColumn Size="6">
                    <RadzenText><strong>Fecha de Inicio:</strong></RadzenText>
                    <RadzenCard Style="margin-top: 0.25rem; padding: 0.5rem; background-color: #e3f2fd;">
                        <RadzenText Style="font-weight: 500;">
                            @cooperacion.FechaDeInicio.ToString("dd/MM/yyyy")
                        </RadzenText>
                    </RadzenCard>
                </RadzenColumn>
                <RadzenColumn Size="6">
                    <RadzenText><strong>Fecha Límite de Pago:</strong></RadzenText>
                    <RadzenCard Style="margin-top: 0.25rem; padding: 0.5rem; background-color: #ffebee;">
                        <RadzenText Style="font-weight: 500;">
                            @cooperacion.FechaLimiteDePago.ToString("dd/MM/yyyy")
                        </RadzenText>
                    </RadzenCard>
                </RadzenColumn>
            </RadzenRow>

            <!-- Descripción en fila completa -->
            <RadzenRow Gap="1rem" Style="margin-top: 1rem;">
                <RadzenColumn Size="12">
                    <RadzenText><strong>Descripción:</strong></RadzenText>
                    <RadzenCard Style="margin-top: 0.5rem; padding: 1rem; background-color: #f8f9fa; min-height: 100px;">
                        @if (!string.IsNullOrEmpty(cooperacion.Descripcion))
                    {
                        <RadzenText Style="white-space: pre-wrap; line-height: 1.5;">@cooperacion.Descripcion</RadzenText>
                    }
                    else
                    {
                        <RadzenText Style="color: #6c757d; font-style: italic;">Sin descripción disponible</RadzenText>
                    }
                    </RadzenCard>
                </RadzenColumn>
            </RadzenRow>
        </RadzenFieldset>

        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="0.5rem">
            <RadzenButton Text="Cerrar" ButtonStyle="ButtonStyle.Secondary" Click="(() => ds.Close())" />
        </RadzenStack>
    </RadzenStack>,
        new DialogOptions()
        {
            Width = "750px",
            Height = "500px",
            Resizable = true,
            Draggable = true
        });
    }

    async Task Guardar(Cooperacion cooperacion, DialogService ds)
    {
        if (string.IsNullOrWhiteSpace(cooperacion.Nombre))
        {
            await dialogService.Alert("El nombre de la cooperación es obligatorio", "Validación");
            return;
        }

        Cooperacion resultado;
        if (cooperacion.IdCooperacion == 0)
        {
            resultado = await cooperacionManager.Agregar(cooperacion);
        }
        else
        {
            resultado = await cooperacionManager.Modificar(cooperacion);
        }

        if (resultado != null)
        {
            ds.Close(true);
            await ActualizarTabla();
        }
        else
        {
            await dialogService.Alert(cooperacionManager.Error, "Error al guardar");
        }
    }

    async Task Eliminar(Cooperacion cooperacion)
    {
        var result = await dialogService.OpenAsync($"Confirmar eliminación", ds =>
    @<RadzenStack Gap="1rem">
        <RadzenAlert AlertStyle="AlertStyle.Warning" Icon="warning" Title="¿Está seguro?">
            Se eliminará permanentemente la cooperación <strong>@cooperacion.Nombre</strong>.
            <br />Esta acción no se puede deshacer.
        </RadzenAlert>

        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="0.5rem">
            <RadzenButton Text="Cancelar" ButtonStyle="ButtonStyle.Secondary"
                          Click="(() => ds.Close(false))" />
            <RadzenButton Text="Sí, eliminar" ButtonStyle="ButtonStyle.Danger"
                          Click="(() => ds.Close(true))" />
        </RadzenStack>
    </RadzenStack>,
        new DialogOptions()
        {
            Width = "500px",
            Height = "300px",
            Resizable = true,
            Draggable = true
        });

        if (result == true)
        {
            var eliminado = await cooperacionManager.Eliminar(cooperacion.IdCooperacion.ToString());
            if (eliminado)
            {
                await ActualizarTabla();
            }
            else
            {
                await dialogService.Alert(cooperacionManager.Error ?? "Error desconocido", "Error al eliminar");
            }
        }
    }
}